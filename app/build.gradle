apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'//kapt 插件
android {
    lintOptions {
        checkReleaseBuilds false //在打包Release版本的时候进行检测，这里就直接关掉了，这样即使有报错也不会停止打包了。
        abortOnError false  // 如果为 true，则当lint发现错误时停止 gradle构建
    }
    if (isSignFileValid()) {
        signingConfigs {
            releaseConfig
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.wrbug.developerhelper"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 100040
        versionName "1.0.4"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }
    signingConfigs {
        release {
            storeFile file("TestKey.jks")
            storePassword "123321"
            keyAlias "Test"
            keyPassword "123321"
        }

    }

    buildTypes {
        release {
//            shrinkResources true  //删除没有用到的资源，如果apk动态读取资源，未声明使用某资源，可能出错
//            zipAlignEnabled true  //zipalign是Android SDK中的工具，它能够对打包的应用程序进行优化。
//            minifyEnabled true   //去掉未使用的方法和类
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
    }
    dataBinding {
        enabled = true
    }

}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    implementation 'com.google.code.gson:gson:2.8.5'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.github.yhaolpz:FloatWindow:1.0.9'
    implementation project(':basecommon')
    kapt "com.android.databinding:compiler:3.1.4"
    implementation 'com.elvishew:xlog:1.6.1'
    implementation 'org.jetbrains.anko:anko-commons:0.10.8'
    //dagger2
    implementation 'com.google.dagger:dagger:2.16'
    // https://mvnrepository.com/artifact/dom4j/dom4j
    implementation 'dom4j:dom4j:1.6.1'
    implementation 'com.evrencoskun.library:tableview:0.8.8'
    implementation 'gdut.bsx:share2:0.9.3'
    kapt 'com.google.dagger:dagger-compiler:2.16'
    implementation project(':xposedmodule')
    implementation 'de.blox:graphview:0.5.0'
    implementation project(':basemoduleimport')
    implementation project(':ipc')
}
kapt {
    generateStubs = true
}


Properties props = new Properties()
def propFile = file('../signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
    if (props != null &&
            props.containsKey('SIGN_FILE') && props.containsKey('SIGN_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.releaseConfig.storeFile = file(props['SIGN_FILE'])
        android.signingConfigs.releaseConfig.storePassword = props['SIGN_PASSWORD']
        android.signingConfigs.releaseConfig.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.releaseConfig.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'release build not found signing properties'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'release build not found signing file'
    android.buildTypes.release.signingConfig = null
}

def isSignFileValid() {
    return file('../signing.properties').canRead()
}
